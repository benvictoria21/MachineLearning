{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"f-xor.oipyub","provenance":[{"file_id":"1JlNviJA-aPC4Dp5pE_aGurLtA77okBId","timestamp":1595368078812}],"private_outputs":true,"authorship_tag":"ABX9TyPIRGhmR/y+MKRiTHZ5du8W"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"zn-spDDSd7X4","colab_type":"code","colab":{}},"source":["%matplotlib inline\n","import random\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4AZU__HOeC1V","colab_type":"code","colab":{}},"source":["def generate_data(sample_size:int)->tuple:\n","    # Parameters for mean distributions\n","    mean_blue = [1, 0]\n","    mean_orange = [0, 1]\n","    mean_cov = np.eye(2)\n","    mean_size = 10\n","    \n","    # Additional parameters for blue and orange distributions\n","    sample_cov = np.eye(2)/5\n","    \n","    # Generate mean components for blue and orange (10 means for each)\n","    sample_blue_mean = np.random.multivariate_normal(mean_blue, mean_cov, mean_size)\n","    sample_orange_mean = np.random.multivariate_normal(mean_orange, mean_cov, mean_size)\n","    \n","    # Generate blue points\n","    sample_blue = np.array([\n","        np.random.multivariate_normal(sample_blue_mean[random.randint(0, 9)],\n","                                      sample_cov)\n","        for _ in range(sample_size)\n","    ])\n","    y_blue = [0 for _ in range(sample_size)]\n","\n","    # Generate orange points\n","    sample_orange = np.array([\n","        np.random.multivariate_normal(sample_orange_mean[random.randint(0, 9)],\n","                                      sample_cov)\n","        for _ in range(sample_size)\n","    ])\n","    y_orange = [1 for _ in range(sample_size)]\n","\n","    data_x = np.concatenate((sample_blue, sample_orange), axis=0)\n","    data_y = np.concatenate((y_blue, y_orange))\n","    return data_x, data_y"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ti1fXlaLedyW","colab_type":"code","colab":{}},"source":["sample_size = 100\n","data_x, data_y = generate_data(sample_size)\n","sample_blue = data_x[data_y == 0, :]\n","sample_orange = data_x[data_y == 1, :]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NPkV7lZeeg-C","colab_type":"code","colab":{}},"source":["# Plot\n","fig = plt.figure(figsize=(15, 15))\n","ax1 = fig.add_subplot(2, 2, 1)\n","\n","ax1.plot(sample_blue[:, 0], sample_blue[:, 1], 'o')\n","ax1.plot(sample_orange[:, 0], sample_orange[:, 1], 'o', color='orange')\n","ax1.set_title('0/1 Response')\n","plt.show()\n","\n","plot_x_min, plot_x_max = ax1.get_xlim()\n","plot_y_min, plot_y_max = ax1.get_ylim()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6LVqVtTNfMHg","colab_type":"code","colab":{}},"source":["# Linear regression\n","mat_x = np.hstack((np.ones((sample_size*2, 1)), data_x))\n","mat_xt = np.transpose(mat_x)\n","vec_y = data_y\n","\n","# Solve (X^T*X)b = X^T*y for b\n","ols_beta = np.linalg.solve(np.matmul(mat_xt, mat_x), np.matmul(mat_xt, vec_y))\n","\n","print('=== Estimated Coefficients for OLS ===')\n","print('beta0:', ols_beta[0], '(constant)')\n","print('beta1:', ols_beta[1])\n","print('beta2:', ols_beta[2])\\"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ptyfe7mPfO9k","colab_type":"code","colab":{}},"source":["\"\"\"FIGURE 2.1. A classification example in 2D.\"\"\"\n","# Plot for OLS\n","ax2 = fig.add_subplot(2, 2, 2)\n","\n","ax2.plot(sample_blue[:, 0], sample_blue[:, 1], 'o', color='C0')\n","ax2.plot(sample_orange[:, 0], sample_orange[:, 1], 'o', color='orange')\n","\n","# OLS line for y_hat = 0.5\n","ols_line_y_min = (.5 - ols_beta[0] - plot_x_min*ols_beta[1])/ols_beta[2]\n","ols_line_y_max = (.5 - ols_beta[0] - plot_x_max*ols_beta[1])/ols_beta[2]\n","ax2.plot([plot_x_min, plot_x_max], [ols_line_y_min, ols_line_y_max], color='black')\n","\n","# https://matplotlib.org/examples/pylab_examples/fill_between_demo.html\n","ax2.fill_between([plot_x_min, plot_x_max], plot_y_min, [ols_line_y_min, ols_line_y_max],\n","                facecolor='blue', alpha=.2)\n","ax2.fill_between([plot_x_min, plot_x_max], [ols_line_y_min, ols_line_y_max], plot_y_max,\n","                facecolor='orange', alpha=.2)\n","ax2.set_title('Linear Regression of 0/1 Response')\n","ax2.set_xlim((plot_x_min, plot_x_max))\n","ax2.set_ylim((plot_y_min, plot_y_max))\n","fig\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wgNB65zBfR-T","colab_type":"code","colab":{}},"source":["# K-nearest neighbors\n","def knn(k: int, point, data_x, data_y) -> float:\n","    if not isinstance(point, np.ndarray):\n","        point = np.array(point)\n","    distances = [(sum((x - point)**2), y) for x, y in zip(data_x, data_y)]\n","    distances.sort()\n","    return sum(y for _, y in distances[:k])/k"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"faEW__a6fVLn","colab_type":"code","colab":{}},"source":["\"\"\"FIGURE 2.2. 15-nearest-neighbor method\"\"\"\n","# Compute KNN for k = 15 and k = 1\n","knn_grid = np.array([(i, j)\n","                     for i in np.arange(plot_x_min, plot_x_max, .1)\n","                     for j in np.arange(plot_y_min, plot_y_max, .1)])\n","knn15_result = np.array([\n","    (i, j, knn(15, (i, j), data_x, vec_y))\n","    for i, j in knn_grid\n","])\n","\n","# Plot for KNN with k = 15\n","knn15_blue = np.array([\n","    (i, j)\n","    for i, j, knn15 in knn15_result\n","    if knn15 < .5\n","])\n","knn15_orange = np.array([\n","    (i, j)\n","    for i, j, knn15 in knn15_result\n","    if knn15 > .5\n","])\n","ax3 = fig.add_subplot(2, 2, 3)\n","# KNN areas\n","ax3.plot(knn15_blue[:, 0], knn15_blue[:, 1], 'o', alpha=.2)\n","ax3.plot(knn15_orange[:, 0], knn15_orange[:, 1], 'o', color='orange', alpha=.2)\n","# Original data\n","ax3.plot(sample_blue[:, 0], sample_blue[:, 1], 'o', color='C0')\n","ax3.plot(sample_orange[:, 0], sample_orange[:, 1], 'o', color='orange')\n","ax3.set_title('15-Nearest Neighbor Classifier')\n","fig\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TgEEuo0pfYk9","colab_type":"code","colab":{}},"source":["\"\"\"FIGURE 2.2. 15-nearest-neighbor method\"\"\"\n","# Compute KNN for k = 15 and k = 1\n","knn_grid = np.array([(i, j)\n","                     for i in np.arange(plot_x_min, plot_x_max, .1)\n","                     for j in np.arange(plot_y_min, plot_y_max, .1)])\n","knn15_result = np.array([\n","    (i, j, knn(15, (i, j), data_x, vec_y))\n","    for i, j in knn_grid\n","])\n","\n","# Plot for KNN with k = 15\n","knn15_blue = np.array([\n","    (i, j)\n","    for i, j, knn15 in knn15_result\n","    if knn15 < .5\n","])\n","knn15_orange = np.array([\n","    (i, j)\n","    for i, j, knn15 in knn15_result\n","    if knn15 > .5\n","])\n","ax3 = fig.add_subplot(2, 2, 3)\n","# KNN areas\n","ax3.plot(knn15_blue[:, 0], knn15_blue[:, 1], 'o', alpha=.2)\n","ax3.plot(knn15_orange[:, 0], knn15_orange[:, 1], 'o', color='orange', alpha=.2)\n","# Original data\n","ax3.plot(sample_blue[:, 0], sample_blue[:, 1], 'o', color='C0')\n","ax3.plot(sample_orange[:, 0], sample_orange[:, 1], 'o', color='orange')\n","ax3.set_title('15-Nearest Neighbor Classifier')\n","fig"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"f6-2Q7KFfbay","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}